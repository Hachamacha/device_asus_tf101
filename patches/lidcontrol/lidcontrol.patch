From a0b5f61dd4feab4e6f9dfb33743625b1bea5f158 Mon Sep 17 00:00:00 2001
From: Donald Munn <donald.munn@gmail.com>
Date: Mon, 23 Jul 2012 22:24:32 +0000
Subject: Add support to control screen state with keyboard dock

Change-Id: Iceaae124120cdbc26f0f0648458b5cbe418567a2
---
diff --git a/core/java/android/content/Intent.java b/core/java/android/content/Intent.java
index 3fdf451..50da4b5 100644
--- a/core/java/android/content/Intent.java
+++ b/core/java/android/content/Intent.java
@@ -2717,7 +2717,8 @@ public class Intent implements Parcelable, Cloneable {
      * {@link android.content.Intent#EXTRA_DOCK_STATE_DESK}, or
      * {@link android.content.Intent#EXTRA_DOCK_STATE_CAR}, or
      * {@link android.content.Intent#EXTRA_DOCK_STATE_LE_DESK}, or
-     * {@link android.content.Intent#EXTRA_DOCK_STATE_HE_DESK}.
+     * {@link android.content.Intent#EXTRA_DOCK_STATE_HE_DESK}, or
+     * {@link android.content.Intent#EXTRA_DOCK_STATE_KB_DOCK}.
      */
     public static final String EXTRA_DOCK_STATE = "android.intent.extra.DOCK_STATE";
 
@@ -2752,6 +2753,12 @@ public class Intent implements Parcelable, Cloneable {
     public static final int EXTRA_DOCK_STATE_HE_DESK = 4;
 
     /**
+     * Used as an int value for {@link android.content.Intent#EXTRA_DOCK_STATE}
+     * to represent that the device is in a keyboard dock.
+     */
+    public static final int EXTRA_DOCK_STATE_KB_DOCK = 10;
+
+    /**
      * Boolean that can be supplied as meta-data with a dock activity, to
      * indicate that the dock should take over the home key when it is active.
      */
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index 13d0bc0..f7275e9 100755
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -353,6 +353,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     int mCarDockRotation;
     int mDeskDockRotation;
     int mHdmiRotation;
+    int mKeyboardDockRotation;
 
     int mUserRotationMode = WindowManagerPolicy.USER_ROTATION_FREE;
     int mUserRotation = Surface.ROTATION_0;
@@ -361,6 +362,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     int mAllowAllRotations = -1;
     boolean mCarDockEnablesAccelerometer;
     boolean mDeskDockEnablesAccelerometer;
+    boolean mKeyboardDockEnablesAccelerometer;
     int mLidKeyboardAccessibility;
     int mLidNavigationAccessibility;
     boolean mLidControlsSleep;
@@ -373,6 +375,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     
     int mPointerLocationMode = 0; // guarded by mLock
 
+    private boolean mInvertLidControl = false;
+
     // The last window we were told about in focusChanged.
     WindowState mFocusedWindow;
     IApplicationToken mFocusedApp;
@@ -913,10 +917,14 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 com.android.internal.R.integer.config_carDockRotation);
         mDeskDockRotation = readRotation(
                 com.android.internal.R.integer.config_deskDockRotation);
+        mKeyboardDockRotation = readRotation(
+                com.android.internal.R.integer.config_keyboardDockRotation);
         mCarDockEnablesAccelerometer = mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_carDockEnablesAccelerometer);
         mDeskDockEnablesAccelerometer = mContext.getResources().getBoolean(
                 com.android.internal.R.bool.config_deskDockEnablesAccelerometer);
+        mKeyboardDockEnablesAccelerometer = mContext.getResources().getBoolean(
+                com.android.internal.R.bool.config_keyboardDockEnablesAccelerometer);
         mLidKeyboardAccessibility = mContext.getResources().getInteger(
                 com.android.internal.R.integer.config_lidKeyboardAccessibility);
         mLidNavigationAccessibility = mContext.getResources().getInteger(
@@ -969,6 +977,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         } else {
             screenTurnedOff(WindowManagerPolicy.OFF_BECAUSE_OF_USER);
         }
+
+        mInvertLidControl = mContext.getResources().getBoolean(
+                 com.android.internal.R.bool.config_invertLidControl);
     }
 
     public void setInitialDisplaySize(Display display, int width, int height) {
@@ -1288,6 +1299,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     
     void readLidState() {
         mLidState = mWindowManagerFuncs.getLidState();
+        if (mInvertLidControl) {
+            if (mDockMode == Intent.EXTRA_DOCK_STATE_KB_DOCK) {
+                mLidState = mLidState^1;
+            } else {
+                mLidState = LID_ABSENT;
+            }
+        }
     }
     
     private boolean isHidden(int accessibilityMode) {
@@ -3027,6 +3045,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
     /** {@inheritDoc} */
     public void notifyLidSwitchChanged(long whenNanos, boolean lidOpen) {
+        // Dirty fix for devices that report the lid state incorrectly
+        if (mInvertLidControl) {
+            lidOpen = !lidOpen;
+        }
+
         // do nothing if headless
         if (mHeadless) return;
 
@@ -3987,6 +4010,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 // enable 180 degree rotation while docked.
                 preferredRotation = mDeskDockEnablesAccelerometer
                         ? sensorRotation : mDeskDockRotation;
+            } else if(mDockMode == Intent.EXTRA_DOCK_STATE_KB_DOCK
+                    && (mKeyboardDockEnablesAccelerometer || mKeyboardDockRotation >= 0)) {
+                // Ignore sensor when in keyboard dock unless explicitly enabled.
+                // This case can override the behavior of NOSENSOR, and can also
+                // enable 180 degree rotation while docked.
+                preferredRotation = mKeyboardDockEnablesAccelerometer
+                        ? sensorRotation : mKeyboardDockRotation;
             } else if (mHdmiPlugged) {
                 // Ignore sensor when plugged into HDMI.
                 // Note that the dock orientation overrides the HDMI orientation.
diff --git a/services/java/com/android/server/DockObserver.java b/services/java/com/android/server/DockObserver.java
index 64789d3..4696294 100644
--- a/services/java/com/android/server/DockObserver.java
+++ b/services/java/com/android/server/DockObserver.java
@@ -137,8 +137,9 @@ class DockObserver extends UEventObserver {
 
                         final ContentResolver cr = mContext.getContentResolver();
 
-                        if (Settings.Secure.getInt(cr,
-                                Settings.Secure.DEVICE_PROVISIONED, 0) == 0) {
+                        if ((Settings.Secure.getInt(cr,
+                                Settings.Secure.DEVICE_PROVISIONED, 0) == 0)
+                                && (mDockState != Intent.EXTRA_DOCK_STATE_KB_DOCK)) {
                             Slog.i(TAG, "Device not provisioned, skipping dock broadcast");
                             return;
                         }
--
cgit v0.9.0.2
